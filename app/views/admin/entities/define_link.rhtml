<% if @relation %>
<h1><%=t("madb_define_link", { :vars => { 'parent' => t(@relation.parent.name,{ :scope => "account"}), 'child' => t(@relation.child.name, { :scope => "account"} ) }})%></h1>
<%else%>
<h1><%=t("madb_define_new_link", { :vars => { 'entity' => t(@source.name,{ :scope => "account"}) }})%></h1>
<%end%>
<% if params["action"]=="edit_link" %>
<%= help_info("madb_help_info_admin_entities_edit_link")%>
<% else %>
<%= help_info("madb_help_info_admin_entities_define_link")%>
<% end %>

<% if false %>

      <script type="text/javascript">
      function check_link_form()
      {
        c2p = $("relation_from_child_to_parent_name").value;
        p2c = $("relation_from_parent_to_child_name").value;
        if ((c2p=='') || (p2c==''))
        {
          alert('<%= t('madb_you_need_to_provide_names_for_the_link_in_both_directions') %>');
          return false;
        }
        else
        {
          return true;
        }
      }

      </script>
      <% form_tag({:action => "add_link"} , {:onsubmit => "return check_link_form();"}) do -%>
      <%= form_hidden_fields( :source_id => @source_id, "relation[#{@this_side}]" => @source_id) %>
      <% if @relation %>
        <input type="hidden" name="relation_id" value="<%= @relation.id %>">
      <% end -%>

      <table>
      <tr>
        <td><%=t("madb_"+@other_side_name+"_entity")%>  :</td>

        <td><select <%= @relation ? 'disabled="disabled"' : '' %> name="relation[<%=@other_side%>]">
            <% entities_for_select = @entities.collect{|e| [t(e.name,:scope => "account"), e.id]  } %>
            <%# options_from_collection_for_select(@entities, "id","name", @relation ? @relation.send("#{@other_side}"):nil)
            %>
          <%= options_for_select(entities_for_select, @relation ? @relation.send("#{@other_side}"):nil)%>
      </select>
        </td>
      </tr>

      <tr>
        <td><%= t("madb_from_parent_to_child_relation_name", {:vars => { "parent_entity" => t(@parent_entity,:scope => "account"), "child_entity" => t(@child_entity ,:scope => "account")}})%>:</td><td> <%= text_field("relation","from_parent_to_child_name")%></td>
      </tr>
      <tr>
        <td><%= t("madb_from_child_to_parent_relation_name", :vars => { "parent_entity" => t(@parent_entity,:scope => "account"), "child_entity" => t(@child_entity ,:scope => "account")})%>:</td><td> <%= text_field("relation","from_child_to_parent_name")%></td>
      </tr>
      <tr>
        <td><%= t("madb_can_one_child_entity_have_several_parents_question", :vars => { "parent_entity" => t(@parent_entity,:scope => "account"), "child_entity" => t(@child_entity ,:scope => "account")}) %> :</td>
        <td><select <%= @parent_side_edit ? '' : 'disabled="disabled" '  %> name="relation[parent_side_type_id]">
            <% parent_ddl_options = @relation_types.collect{|rt| rt.name=="one" ? [ t("madb_no_only_one_parent"), rt.id ] : [ t("madb_yes_multiple_parent"), rt.id ] }%>
            <%# options_from_collection_for_select(@relation_types, "id","name", (@relation ? @relation.parent_side_type_id : nil))
            %>
            <%= options_for_select(parent_ddl_options,(@relation ? @relation.parent_side_type_id : nil))%>
      </select>
      </td>
      </tr>
      <tr>
        <td><%= t("madb_can_one_parent_entity_have_several_children_question", :vars => { "parent_entity" => t(@parent_entity, :scope => "account"), "child_entity" => t(@child_entity ,:scope => "account")}) %>:</td><td><select  <%= @child_side_edit ? '' : 'disabled="disabled" ' %> name="relation[child_side_type_id]">
            <% child_ddl_options = @relation_types.collect{|rt| rt.name=="one" ? [ t("madb_no_only_one_child"), rt.id ] : [ t("madb_yes_multiple_child"), rt.id ] }%>
      <%# options_from_collection_for_select(@relation_types, "id","name", (@relation ? @relation.child_side_type_id : nil))%>
            <%= options_for_select(child_ddl_options,(@relation ? @relation.child_side_type_id : nil))%>
      </select>
      </td>
      </tr>
      </table>
        <%= submit_tag t("madb_submit")%> 
        <% if request.env["HTTP_REFERER"] %>
          <%=link_to t("madb_cancel"),request.env["HTTP_REFERER"] %>
        <% end %>
      </form>

      <script type="text/javascript">
      s = 'relation[<%=@other_side%>]';
      ddl = document.forms[0][s];
      function update_parents () {
            value = ddl.options[ddl.selectedIndex].text;
            spans = $A(document.getElementsByClassName('no_css_parent_name'));
            spans.each( function(e){ e.innerHTML = value})
          }
      function update_children () {
            value = ddl.options[ddl.selectedIndex].text;
            spans = $A(document.getElementsByClassName('no_css_child_name'));
            spans.each( function(e){ e.innerHTML = value})
          }
      <% if params["parent_id"] or @this_side=="parent_id" %>
        update_children();
        Event.observe(ddl, "change", update_children);
      <% else %>
        update_parents();
        Event.observe(ddl, "change", update_parents);
      <% end %>
      </script>
      <% end %>


      <div id="link_form"></div>


      <script type="text/javascript">
      <% yui_block( :modules => [ "gallery-form", "madb" ], :use => [ 'gallery-form', 'anim', 'madb','event-custom', 'json-parse']) do %>

          var fields = [ ];
          var label_translations_hash = { parent_entity: '<%= escape_javascript(@parent_entity) %>', child_entity: '<%= escape_javascript(@child_entity) %>'  };
          var entities_options_labels = Y.JSON.parse('<%= escape_javascript(@entities_for_yui_select.inject({}){|acc,h| acc.merge( { h[:value].to_s => h[:label] } )    }.to_json)%>');
      <% if @relation %>
          fields.push( new Y.HiddenField({
                        id: "relation_id",
                        name:"relation_id",
                        value:'<%= @relation.id %>' }));
      <% end -%>
          fields.push( new Y.HiddenField({
                        id: "source_id",
                        name:"source_id",
                        value:'<%= @source_id %>' }));
          fields.push( new Y.HiddenField({
                        id: "this_side_id",
                        name:'relation[<%= @this_side %>]',
                        value:'<%= @source_id %>' }));
          var entities_list =  new Y.SelectField({
                        id: "related_entity",
                        name:"relation[<%=@other_side %>]",
                        value: '<%= @relation? escape_javascript(@relation.send(@other_side).to_s): '' %>',
                        choices: <%=@entities_for_yui_select.to_json%>,
                        with_default_option: false,
                        disabled: <%= @relation ? 'true' : 'false'%>,
                        label:'<%=escape_javascript(t("madb_"+@other_side_name))%>'})
          fields.push( entities_list );
          fields.push( new Y.TextField({
                        id: "p2c_name",
                        name:"relation[from_parent_to_child_name]",
                        value: '<%= @relation? escape_javascript(@relation.from_parent_to_child_name): '' %>',
                        label: Y.madb.translate('<%=escape_javascript(t("madb_from_parent_to_child_relation_name"))%>', label_translations_hash ) }));
          fields.push( new Y.TextField({
                        id: "c2p_name",
                        name:"relation[from_child_to_parent_name]",
                        value: '<%= @relation? escape_javascript(@relation.from_child_to_parent_name): '' %>',
                        label: Y.madb.translate('<%=escape_javascript(t("madb_from_child_to_parent_relation_name"))%>', label_translations_hash  ) }));
          <%# if we can edit the parent side type, display a drop down list, else display the value only %>


          <%#FIXME disable ddl unless  @parent_side_edit %>
          <% parent_ddl_options = @relation_types.collect{|rt| rt.name=="one" ?  { :label => t("madb_no_only_one_parent"), :value => rt.id.to_s  } : { :label => t("madb_yes_multiple_parent"), :value => rt.id.to_s }  }%>
          fields.push( new Y.SelectField({
                        id: "multiple_parents",
                        name:"relation[parent_side_type_id]",
                        choices: <%= parent_ddl_options.to_json %>,
                        with_default_option: false,
                        disabled: <%= @parent_side_edit ? 'false' : 'true'%>,
                        value: '<%= @relation? escape_javascript(@relation.parent_side_type_id.to_s): '' %>',
                        label: Y.madb.translate('<%=escape_javascript(t("madb_can_one_child_entity_have_several_parents_question"))%>', label_translations_hash  ) }));
          <%#FIXME disable ddl unless  @child_side_edit %>
          <% child_ddl_options = @relation_types.collect{|rt| rt.name=="one" ?  { :label => t("madb_no_only_one_child"), :value => rt.id.to_s  } : { :label => t("madb_yes_multiple_child"), :value => rt.id.to_s }  }%>
          fields.push( new Y.SelectField({
                        id: "multiple_children",
                        name:"relation[child_side_type_id]",
                        choices: <%= child_ddl_options.to_json %>,
                        with_default_option: false,
                        disabled: <%= @child_side_edit ? 'false' : 'true'%>,
                        value: '<%= @relation? escape_javascript(@relation.child_side_type_id.to_s): '' %>',
                        label: Y.madb.translate('<%=escape_javascript(t("madb_can_one_parent_entity_have_several_children_question"))%>', label_translations_hash  ) }));

          fields.push ( { type : 'submit', label : '<%= escape_javascript(t('madb_submit')) %>', id: 'commit'});
          fields.push ( {type : 'button', label : '<%= escape_javascript(t('madb_cancel'))%>'});

          var f = new Y.Form({
             id:"link_form",
             contentBox: '#link_form',
             action : '<%= url_for(:action => "add_link", :format => 'js') %>',
             method : 'post',
             upload : false,
             resetAfterSubmit: false,
             skipValidationBeforeSubmit: true,
             fields : fields
             });
          f.render();
          // Update translated labels when choice of linked entity is changed by the user
          var update_translations = function(text) {
            f._formNode.all(".no_css_<%= @other_side_name %>_name").setContent( text);
          }
          entities_list.on("change", function(e) { var text = entities_options_labels[e.currentTarget.get('value')];
                                                   update_translations(text);       });
          // Initialize translations when page first displayed
          update_translations( entities_options_labels[entities_list.get('value')] );
      <%end%>

      </script>
    <% end %>

<div id="link-form">
</div>
<% this_side = @this_side.gsub(/_id/,"") %>
<script type="text/javascript">
<% yui_block( :modules => [ "gallery-form", "madb" ], :use => [ 'gallery-form', 'anim', 'madb','event-custom', 'json-parse']) do %>
  <%=  new_relation_form( this_side.to_sym => @source, :content_box => "link-form", :js_var => "link_form", :relation => @relation, :source => @source  )  %>
  // When user clicks done, the event madb:form_done is fired
  Y.on('madb:form_done', function(f) { if (f===link_form) {
      history.back(1);
      }});
  // When form is successfully submitted, the form fires the success event
  link_form.subscribe('success', function(e) {
        var resp = Y.JSON.parse(e.args.responseText);
        if (resp.status === "success"){
          history.back(1);
        }
        else
        {
          alert(resp.msg);
        }

      });
<%end%>
</script>

