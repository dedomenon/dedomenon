


<% detail_ids = [] %>
<H1><%=h( t("madb_entity_details", :vars => { 'entity' => t(@entity.name, :scope => "account")}) )%></H1>
<%= help_info("madb_help_info_entities_view_intro")%>

<div class="details_display">
  <table>
<% @crosstab_object.each  do |o| %>
        <% next if o.id=="id" %>
        <% detail = Detail.find(o.id, :include => [:data_type]) %>
        <% detail_class = class_from_name(detail.data_type.class_name) %>
        <tr><td class="label_cell"><%=t(detail.name, {:scope => "account"})  %>:</td><td class="data_cell">
            <%=detail_class.format_detail :value => o.value, :controller => self %>
        </td></tr>
<% end %>
</table>
<span class="button_style"><%= link_to( t("madb_edit"), :controller => "entities", :action => "edit", :id => params["id"], :popup => params["popup"] ) %></span>
</div>



<h1><%=t("madb_related_entities")%></h1>
<%= help_info("madb_help_info_entities_views_related_entities")%>


<% [ {:from => "parent", :to => "child"}, {:from => "child", :to => "parent"} ].each do |type| %>
  <% if @entity.send("relations_to_#{type[:to].pluralize}").size>0 %>
  <!-- <div class="section_head"><span><%= t("madb_related_#{type[:to].pluralize}_objects")%></span></div> -->

    <% @entity.send("relations_to_#{type[:to].pluralize}").each do |relation| %>
    <% relation_name = relation.send("from_#{type[:from]}_to_#{type[:to]}_name") %>
    <%# Used by entity_linked event to identify the linkable list who fired the event %>
    <% self_id = type[:from]+"_id" %>
    <% yui_linked_list = "#{relation_name}_from_#{type[:from]}_to_#{type[:to]}_linked_list" %>
    <% yui_linkable_list ="#{relation_name}_from_#{type[:from]}_to_#{type[:to]}_linkable_list" %> 
    <% list_id = "#{relation_name}_#{type[:to]}_div" %>
          <h2><%= t(relation_name,{:scope => "account"}) %></h2>
          <% link_to_many = relation.send("#{type[:to]}_side_type").name=='many' %>
          <% link_from_many = relation.send("#{type[:from]}_side_type").name=='many' %>


          <!-- Linked entities list -->
          <div id="<%=yui_linked_list%>"></div>


<script type="text/javascript">
YAHOO_config = {
                filter: 'debug'
                };


<% yui_block( :modules => [ "madb-tables" ], :use => ['substitute', 'gallery-yui2', 'madb', 'madb-tables', 'io-base', 'event-key', 'widget', 'event-custom', 'json-parse', 'anim', 'collection']) do %>
  <%= entities_table( :js_var => "dt",:entity => relation.send(type[:to]) , :controller => self, :content_box => "##{yui_linked_list}", 
          :source => url_for(
                  :controller => "entities", :action => "related_entities_list", :id => @instance.id, :format => 'js', :params => { :relation_id => relation.id, :type => type[:to].pluralize}),
          :actions => ["view", "edit", "unlink"],
          :data => { :relation_id => relation.id, :type => type[:to].pluralize, :shown_instance => @instance.id } 
          )
          
          %>
  Y.publish('madb:entity_unlinked', {broadcast: 2});
  Y.on('madb:unlink', function(h) { 
                                  var url = '<%= url_for(:controller => 'entities', :action => 'unlink')%>/'+h.record_id+'?<%=self_id%>=<%=params[:id]%>&relation_id=<%=relation.id%>';
                                  var config = { method: 'POST', 
                                                 on: { success : function() { 
                                                                              Y.fire('madb:entity_unlinked', '<%= yui_linked_list %>', h );
                                                                              //  if to many, allow multiple additions
                                                                                try{
                                                                                  this.deleteRow(h.target);
                                                                                }
                                                                                catch(err)
                                                                                {
                                                                                  // if the last row of the page was deleted, refresh the table.
                                                                                  if (err=="TypeError: Cannot call method 'getId' of undefined")
                                                                                  {
                                                                                    dt._refresh_table();
                                                                                  }

                                                                                }
                                                                              
                                                                            },
                                                       failure : function() { alert("<%= t('madb_an_error_occured')%>");}
                                                 },
                                                 context: dt.getDataTable()
                                  };
                                  Y.io(url, config);
  });

  Y.Global.on('madb:entity_linked', function(source,h){ 
    
                                        if (source=="<%= yui_linkable_list %>")
                                        {
                                          dt.getDataTable().addRow(h.record.getData(), 0);  
                                        }
                                    });
<%end%>
</script>






          <div id="<%=list_id%>_add_<%=type[:to]%>_links" class="button_style">
          <script type="text/javascript">
            // initialize counter so we call the linkable table contructor only once
            <%=yui_linkable_list%>_counter=0;
          </script>

            <span id="<%=list_id%>_add_existing_<%=type[:to]%>_link">
              <%=link_to_function t("madb_link_to_existing_entity", { :vars => { 'entity' => t( relation.send(type[:to]).name , :scope => "account")}}), "
            if (#{yui_linkable_list}_counter==0)
              new Ajax.Updater('link_existing_#{type[:to]}_#{relation_name}_div',  '#{url_for :controller => "entities", :action => "link_to_existing" , :format => "html",  "#{type[:from]}_id".to_sym => params["id"], :relation_id=> relation.id, :embedded => "link_existing_#{type[:to]}_#{relation_name}_div", :link_to_many => (link_to_many ? 't':'f'), :update => list_id }  ', {asynchronous:true, evalScripts:true} );
            #{yui_linkable_list}_counter++;
            $('link_existing_#{type[:to]}_#{relation_name}_div').innerHTML='';
            //Element.show('link_existing_#{type[:to]}_#{relation_name}_div');
            Element.show('#{yui_linkable_list}_container');

              " %>
            </span>


            <span class="" id="<%=list_id%>_add_new_<%=type[:to]%>_link">
              <%=link_to_function t("madb_add_new_related_entity" ,{ :vars => { 'entity' => t(relation.send(type[:to]).name, :scope => "account")}}), "
              if (document.getElementById('add_new_#{type[:to]}_#{relation_name}_div').childNodes.length<1)
              {
              new Ajax.Updater('add_new_#{type[:to]}_#{relation_name}_div',  '#{url_for :controller => "entities", :action => "link_to_new" , :id => relation.send(type[:to]).id, "#{type[:from]}_id".to_sym => params["id"], :relation_id=> relation.id, :embedded => "add_new_#{type[:to]}_#{relation_name}_div", :update => list_id}  ', {evalScripts:true, onComplete:function(request){
              /*
                $('add_new_#{type[:to]}_#{relation_name}_div').style.height = $('add_new_#{type[:to]}_#{relation_name}_div').original_height;
                $('add_new_#{type[:to]}_#{relation_name}_div').style.width = $('add_new_#{type[:to]}_#{relation_name}_div').original_width;
                */
                form = $('add_new_#{type[:to]}_#{relation_name}_div').childNodes[0].getElementsByTagName('form')[0];
                if (form!=undefined)
                {
                  form.reset();
                }
                Element.show('add_new_#{type[:to]}_#{relation_name}_div');
                new Form.focusFirstElement(form);
                  /* Works only with ff 1.5
                Element.show('add_new_#{type[:to]}_#{relation_name}_div');
                new Form.focusFirstElement(form);
                */
               }
              });
              }
              else
              {
              /*
              $('add_new_#{type[:to]}_#{relation_name}_div').style.height = $('add_new_#{type[:to]}_#{relation_name}_div').original_height;
              $('add_new_#{type[:to]}_#{relation_name}_div').style.width = $('add_new_#{type[:to]}_#{relation_name}_div').original_width;
                */
                form = $('add_new_#{type[:to]}_#{relation_name}_div').childNodes[0].getElementsByTagName('form')[0];
                if (form!=undefined)
                {
                  form.reset();
                  Element.show('add_new_#{type[:to]}_#{relation_name}_div');
                  new Form.focusFirstElement(form);
                  /* Works only with ff 1.5
                  Element.show('add_new_#{type[:to]}_#{relation_name}_div');
                  new Form.focusFirstElement(form);
                  */
                }
              }

                "  %>
              </span>
          </div>


<div id="<%= yui_linkable_list %>_container" class="tool_in_page" style="display:none;">
  <div id="<%= yui_linkable_list %>" /></div>
  <span class="button_style"><a href="#" onclick="Element.hide('<%= yui_linkable_list%>_container');return false;"><%= t('madb_done')%></a></span>
</div>

          <div id="add_new_<%=type[:to]%>_<%=relation_name%>_div" style="display:none; "></div>
          <div id="link_existing_<%=type[:to]%>_<%=relation_name%>_div" style="display:none; "></div>

          <!--
          <div class="related_<%=type[:to]%>_entities_div" id="<%= list_id %>">
        <%= render_component :controller => "entities", :action => "related_entities_list", :id => @instance.id,:params => { :relation_id => relation.id, :type => type[:to].pluralize, :popup => params["popup"]} %>
      </div>
          -->
      <hr>

      <% end %>

  <% end %>


  <% end %>


