<div id="<%=@list_id%>_table_div" class="<%= @div_class %>">

  <%= form_remote_tag(:update => "#{@list_id}_div", :url => { :controller => "entities", :action => "entities_list"})%>
  <%= form_hidden_fields({ :id => params["id"], :popup => params["popup"]}) %>
<%# FIXME: use EntityDetail
%>
<!--  Here we are collecting the details of the entity. These wiil be displayed in the select
controler so that user may select one of them and provide a value in the text box. The records
which only match with the provided values would be displayed.
params[:details_filter] contains the id of the detail to be filtered
params[:value_filter] contains the value to be filter.

Like if:
params[:detail_filter] = 45  # Suppose its id of the Name field
params[:value_filter] = 'Moshin'
Then only the records which have Mohsin as Name would be displayed.
-->
<% details_for_filter =  @entity.ordered_details.collect{|d| [ t(d.name, {:scope => "account" }), d.detail_id]} %>

<%= t("madb_filter_on") %> <select name="detail_filter">  <%= options_for_select(details_for_filter, params["detail_filter"])  %> </select> <%= t("madb_with_value")%> <input type="text" name="value_filter" value="<%=params["value_filter"]%>">
		<%=submit_tag t("madb_submit")%>
    <%= link_to_remote( t("madb_reset"), :update => "#{@list_id}_div", :url => { :controller => "entities", :action => "entities_list", :id => params["id"]}) %>
     <% if !params["popup"] or params["popup"]!="t" %>
     <%= link_to image_tag("icon/big/newWindow.png", :alt =>t("madb_open_in_new_window"), :title =>t("madb_open_in_new_window")  ), {:controller => "entities", :action => "entities_list", :id => params["id"], :overwrite_params => { :popup=>"t", :list_id => @list_id }},  {:target =>  "#{@list_id}_window", :class => "icon" }   %>
      <% end %>
     <%= link_to image_tag("icon/big/floppy.png", :alt =>t("madb_export"), :title =>t("madb_export")  ), {:controller => "entities", :action => "entities_list", :id => params["id"], :overwrite_params => { :format => "csv"  }}, { :class => "icon"}   %>


    </form>


<% if @list.length >0 %>

     <div class="navigation_links">
  <% if @paginator.length>1 %>
	<%= t("madb_page")%>:
	  <% @paginator.each do |page| %>
	      <span class="navigation_link">
	      <% if page!=@paginator.current %>
	      <%= link_to_remote( page.number , :update => "#{@list_id}_div", :url => {  :overwrite_params=> { :controller => "entities", :action => "entities_list","#{@list_id}_page".to_sym => page.number, :highlight => nil}  }) %>
	      <% else %>
		<%= page.number %>
	      <% end %>
	  </span>
	  <% end %>
   <%end%>
   (<%= t("madb_number_of_records_in_list", :vars=> {"number" => @paginator.item_count}).send(@paginator.item_count>1 ? "pluralize" : "singularize") %>)
      </div>

  <!-- Below is the table that contains the records. -->
   <table id="entities_list_<%=@entity.name%>" class="entities_list">
   <!-- This is the table header that contains the headings of the columns-->
  <thead>
  <tr>
  <% @ordered_fields.each do |c| %>
    <% next if @not_in_list_view.include? c or c == "id" %>
  <th><%=link_to_remote(t(c, { :scope => "account" } ), :update => "#{@list_id}_div", :url => {:controller => "entities", :action => "entities_list",:overwrite_params => {"#{@list_id}_order".to_sym => c}  })  %></th>
  <% end %>
    <th class="action_cell"><%=t "madb_view"%></th>
    <th class="action_cell"><%=t "madb_edit"%></th>
    <th class="action_cell"><%=t "madb_delete"%></th>
  </tr>
  </thead>
  <tbody>
  <% @list.each do |o| %>
    <tr id="<%="tr_#{@list_id}_#{o.id}"%>" <%= %{class="highlight"} if o.id==params["highlight"] %>>
      <%# o.attribute_names.each do |column|
      %>
    <% first_column = nil %>
    <% @ordered_fields.each  do |column| %>
    <% next if @not_in_list_view.include? column or column == "id" %>
    <% first_column||={ 'entity' => t(@entity.name, :scope => "account" ) ,'title'=> t(column, :scope => "account") , 'value'=> o[column] }%>
    <% detail_class = class_from_name(@details[column].data_type.class_name)%>
    <td class="data_cell"><%=detail_class.format_detail :value => o[column], :controller => self %></td>
    <% end %>
    <td class="action_cell">
      <%=link_to(image_tag("icon/big/view.png", :border =>0), { :controller => "entities", :action => "view", :id => o.id, :params => { :popup => params["popup"] } }, { :title=> t("madb_view")}) %>
    </td>
    <td class="action_cell">
	<%=link_to(image_tag("icon/big/edit.png", :border =>0), { :controller => "entities", :action => "edit", :id => o.id , :params => { :popup => params["popup"] }}, { :title=> t("madb_edit")}) %>
    </td>
    <td class="action_cell">

      <% first_column["value"] = @entity.details_in_list_view[0].value_class.format_detail(:value => first_column["value"], :format => :first_column) if @entity.details_in_list_view[0]%>
    <%= link_to_remote( image_tag("icon/big/delete.png", :border =>0), :update => "#{@list_id}_div", :url =>  { :controller => "entities",   :overwrite_params => {:action => "delete",:id => o.id, "#{@list_id}_page".to_sym => @paginator.current } }, :confirm => t("madb_really_delete_entity_question", :vars => first_column ), :title => t("madb_delete") ) %>    </td>

    </tr>
  <% end %>
  </tbody>
  </table>

<% else %>
  <%= t("madb_no_data_found") %>
  <%= link_to t("madb_you_can_add_an_entry"), :action => "add", :id => params["id"] %>
<% end %>


<% if flash["error"] %>
<span class="error">
<%= flash["error"] %>
</span>
<% end %>

</div>



<script type="text/javascript">
// For YUI2 debug files
//YAHOO_config = {
//  filter: 'debug' };
YUI({
    modules: {
        'gallery-yui2': {
            fullpath: 'http://yui.yahooapis.com/gallery-2009.11.19-20/build/gallery-yui2/gallery-yui2-debug.js',
            requires: ['node-base','get','async-queue'],
            optional: [],
            supersedes: []
        }
    }
}).use('substitute', 'gallery-yui2', 'madb', 'io-base', function(Y) {

    Y.yui2().use('datatable', 'paginator', function() {

      var view_formatter = function(cell, record, column, data) {
                               cell.innerHTML='<%=image_tag("icon/big/view.png", :border =>0)%>'; }
      var edit_formatter = function(cell, record, column, data) {
                               cell.innerHTML='<%=image_tag("icon/big/edit.png", :border =>0)%>'; }
      var delete_formatter = function(cell, record, column, data) {
                               cell.innerHTML='<%=image_tag("icon/big/delete.png", :border =>0)%>'; }



      var actions = [ { "key" : "<%= t("madb_view").downcase %>_action_column",  "label": "<%=t("madb_view")%>", "className": "action_cell", "formatter": view_formatter 
                            
                     },
                     { "key": "<%= t("madb_edit").downcase %>_action_column",  "label": "<%=t("madb_edit")%>", "className" : "action_cell", "formatter": edit_formatter  },
                     { "key": "<%=t("madb_delete").downcase %>_action_column",  "label" : "<%=t("madb_delete")%>", "className" : "action_cell", "formatter": delete_formatter  }]

      // we have the id here, enabling initial sorting by id
      var myColumnHeaders = [ <%= @entity.details_in_list_view.collect{|d| d.yui_column(:controller => self)  }.join(',') %> , {"key": "id", "hidden": true}  ] ;
      myColumnHeaders = myColumnHeaders.concat(actions);
       
      var inventory = <%=@list.to_json %>
      var myColumnSet = new YAHOO.widget.ColumnSet(myColumnHeaders);
      var myDataSource = new YAHOO.util.DataSource("<%= url_for :controller => "entities", :action => "entities_list", :format => "js", :id => @entity  %>?");
      myDataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
      myDataSource.responseSchema = {
        resultsList: "records",
        metaFields: { totalRecords: "totalRecords" },
      // we have the id here, enabling initial sorting by id
        fields: [ <%= @entity.details_in_list_view.collect{|d| d.yui_column(:controller => self)  }.join(',') %>, {"key": "id"} ]
      };
      
      // Define the filtering fields
      //////////////////////////////
      var filter_select_label_template = '<span><%= t("madb_filter_on") %> </span>';
      var filter_select_label = Y.Node.create(filter_select_label_template);
      var filter_select_template = '<select><%=options_for_select(details_for_filter).gsub(/\n/,'') %></select>';
      var filter_select = Y.Node.create(filter_select_template);
      var filter_field_label_template = '<span> <%= t("madb_with_value")%> </span>';
      var filter_field_label =Y.Node.create(filter_field_label_template);
      var filter_field_template = '<input type="text" name="value_filter"/>';
      var filter_field = Y.Node.create(filter_field_template);
      var filter_submit_template = '<button><%= t("madb_submit") %></button>';
      var filter_submit = Y.Node.create(filter_submit_template);
      var filter_reset_template = '<button><%= t("madb_reset") %></button>';
      var filter_reset = Y.Node.create(filter_reset_template);
      var filter_csv_icon_template = '<%=link_to  image_tag("icon/big/floppy.png", :alt =>t("madb_export"), :title =>t("madb_export")  ), {:controller => "entities", :action => "entities_list", :id => params["id"], :overwrite_params => { :format => "csv"  }}, { :class => "icon"} %>';
      var filter_csv_icon = Y.Node.create(filter_csv_icon_template);
      
      var filter_container = Y.one('#yui-entities-list-filter');

      filter_container.append(filter_select_label).append(filter_select).append(filter_field_label).append(filter_field).append(filter_submit).append(filter_reset).append(filter_csv_icon);


        var requestBuilder= function (oState, oSelf) {
                var sort, dir, startIndex, results, s;
                oState = oState || {pagination: null, sortedBy: null};
        
                sort = (oState.sortedBy) ? oState.sortedBy.key : oSelf.getColumnSet().keys[0].getKey();
                dir = (oState.sortedBy && oState.sortedBy.dir === YAHOO.widget.DataTable.CLASS_DESC) ? "desc" : "asc"; 
                
                startIndex = (oState.pagination) ? oState.pagination.recordOffset : 0;
                results = (oState.pagination) ? oState.pagination.rowsPerPage : null;
                
                s= "&results="     + results +
                            "&startIndex="  + startIndex +
                            "&sort=" + sort +
                            "&dir=" + dir;
                if (oSelf.value_filter!=="")
                {
                          s+="&detail_filter="   + oSelf.detail_filter +
                             "&value_filter="    + oSelf.value_filter ; 
                }
                return s;
        }





      // Define the datatable
      ///////////////////////
      var myConfigs = {
        caption:"Example: Inline Editing",
        paginator: new YAHOO.widget.Paginator({ rowsPerPage: <%= MadbSettings.list_length %> }), 
        dynamicData: true,
        sortedBy: {
            // eventually replace this with the second line
            key: "id",
            //key: "<%= @ordered_fields[0] %>",
            dir: YAHOO.widget.DataTable.CLASS_ASC
        },
        // eventually replace this list with the commented one. 
        // Temporarily leaving asis for selenium tests
        initialRequest: "sort=id&dir=asc&startIndex=0&results=<%=@paginator.items_per_page%>",
        //initialRequest: "sort=<%= @ordered_fields[0] %>&dir=asc&startIndex=0&results=<%=@paginator.items_per_page%>",
        generateRequest: requestBuilder
      }



      var myDataTable = new YAHOO.widget.DataTable("yui-entities-list", myColumnSet, myDataSource,myConfigs);
      // Update totalRecords on the fly with value from server
      myDataTable.handleDataReturnPayload = function (oRequest, oResponse, oPayload) {
          oPayload.totalRecords = oResponse.meta.totalRecords;
          return oPayload; }
      myDataTable.subscribe('cellClickEvent',function (oArgs) {
                        var target = oArgs.target;
                        var record = this.getRecord(target);
                        var column = this.getColumn(target);
                        if (column.key==='delete_action_column') {
                          var first_column = this.getColumnSet().keys[0].key; 
                          var first_value = record.getData(this.getColumnSet().keys[0].key);
                          if (confirm(Y.madb.translate('<%= t("madb_really_delete_entity_question") %>', { entity: '<%= @entity.name%>', title: first_column  , value: first_value}  ))) {
                            var url = '<%= url_for  :controller => "entities", :action => "delete"%>/'+record.getData('id')+'.js';
                            var config = { method: 'POST', 
                                           on: { success : function() { myDataTable.deleteRow(target); },
                                                 failure : function() { alert('<%= t('madb_an_error_occured')%>');}
                                           }
                            };
                            Y.io(url, config);
                          }
                        }
            });

      myDataTable.subscribe('cellClickEvent',function (oArgs) {
                        var target = oArgs.target;
                        var record = this.getRecord(target);
                        var column = this.getColumn(target);
                        if (column.key==='view_action_column') {
                          window.location='<%= url_for({ :controller => "entities", :action => "view"})%>/'+ record.getData('id') ;
                        }
            });
      myDataTable.subscribe('cellClickEvent',function (oArgs) {
                        var target = oArgs.target;
                        var record = this.getRecord(target);
                        var column = this.getColumn(target);
                        if (column.key==='edit_action_column') {
                          window.location='<%= url_for({ :controller => "entities", :action => "edit"})%>/'+ record.getData('id') ;
                        }
            });
      myDataTable.detail_filter = "";
      myDataTable.value_filter = "";

    myDataTable.refresh = function() {

      var oState = this.getState(),
                request,
                oCallback;
      // display first page
      oState.pagination.recordOffset = 0;
      
      oCallback = {
          success : this.onDataReturnSetRows,
          failure : this.onDataReturnSetRows,
          argument : oState,
          scope : this
      };

      // Generate a query string
      request = this.get("generateRequest")(oState, this);
      
      // Fire off a request for new data.
      this.getDataSource().sendRequest(request, oCallback);
    }

      filter_submit.on('click', function(evt) {
        myDataTable.detail_filter = filter_select.get('value');
        myDataTable.value_filter = filter_field.get('value');
        myDataTable.refresh();



      });
      filter_reset.on('click', function(evt) {
        myDataTable.detail_filter = "";
        filter_field.set('value', ""); 
        myDataTable.value_filter = "";
        myDataTable.refresh();
      });

}) });


</script>

